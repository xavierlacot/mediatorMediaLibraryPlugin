<?php

/**
 * PluginCcMediaFolder
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
abstract class PluginCcMediaFolder extends BaseCcMediaFolder
{
  public function __toString()
  {
    return $this->getName();
  }

  public function __toStringWithDepth()
  {
    return str_repeat("&nbsp;&nbsp;&nbsp;", $this->getLevel()).$this->__toString();
  }

  public function delete(Doctrine_Connection $conn = null)
  {
    $medias = Doctrine::getTable('CcMedia')->findByCcMediaFolder($this->getId());

    foreach ($medias as $media)
    {
      $media->delete($conn);
    }

    $subfolders = $this->getNode()->getChildren();

    foreach ($subfolders as $subfolder)
    {
      $subfolder->delete($conn);
    }

    $filesystem = cleverMediaLibraryToolkit::getFilesystem();
    $sizes = cleverMediaLibraryToolkit::getAvailableSizes();
    $path = $this->getAbsolutePath();

    foreach ($sizes as $size => $params)
    {
      $filesystem->unlink($params['directory'].DIRECTORY_SEPARATOR.$path);
    }

    parent::delete($conn);
  }

  public function getFiles($q = null)
  {
    if ($q === null)
    {
      $q = Doctrine_Query::create()->from('CcMedia m');
    }

    $q->andWhere('m.cc_media_folder_id = ?', $this->getId());
    return $q->execute();
  }

  public function getMetadata($name)
  {
    if ($this->isNew())
    {
      return null;
    }

    if (!isset($this->_metadatas[$name]))
    {
      $metadata = Doctrine_Query::create()
        ->from('CcMediaFolderMetadata m')
        ->where('m.name = ? AND cc_media_folder_id = ?', array($name, $this->id))
        ->fetchOne();

      if ($metadata)
      {
        $this->_metadatas[$name] = $metadata;
      }
    }
    else
    {
      $metadata = $this->_metadatas[$name];
    }

    return $metadata;
  }

  public function hasMetadata($name)
  {
    return (null !== $this->getMetadata($name));
  }

  public function save(Doctrine_Connection $conn = null)
  {
    parent::save($conn);

    if (isset($this->_metadatas_unsaved))
    {
      foreach ($this->_metadatas_unsaved as $key => $value)
      {
        $this->setMetadata($key, $value);
      }
    }
  }

  public function setMetadata($name, $value)
  {
    if ($this->isNew())
    {
      $this->_metadatas_unsaved[$name] = $value;
      return false;
    }

    $metadata = $this->getMetadata($name);

    if (null === $metadata)
    {
      $metadata = new ccMediaFolderMetadata();
      $metadata->setName($name);
      $metadata->setccMediaFolderId($this->getPrimaryKey());
    }

    $metadata->setValue($value);
    $result = $metadata->save();
    $this->_metadatas[$name] = $metadata;
    return $result;
  }

  public function setMetadatas($metadatas)
  {
    if (is_array($metadatas))
    {
      foreach ($metadatas as $name => $value)
      {
        $this->setMetadata($name, $value);
      }
    }
  }

  public function update($array)
  {
    // create the filesystem
    $filesystem = cleverMediaLibraryToolkit::getFilesystem();

    $previous_parent = $this->getNode()->getParent();
    $parent = $previous_parent;
    $previous_absolute_path = $this->getAbsolutePath();
    $descendants = $this->getNode()->getDescendants();

    foreach ($array as $key => $value)
    {
      if ('parent' !== $key)
      {
        $fieldNames = Doctrine::getTable('ccMediaFolder')->getColumnNames();

        if (in_array($key, $fieldNames))
        {
          $this->$key = $value;
        }
        else
        {
          $this->setMetadata($key, $value);
        }
      }
    }

    $sizes = cleverMediaLibraryToolkit::getAvailableSizes();
    $folder_path = isset($array['folder_path']) ? $array['folder_path'] : cleverMediaLibraryInflector::toUrl($this->getName());
    $this->setFolderPath($folder_path);

    if (isset($array['parent']))
    {
      $parent = $array['parent'];
      $parent_path = ('' != $parent->getAbsolutePath()) ? $parent->getAbsolutePath().DIRECTORY_SEPARATOR : '';
      $this->setAbsolutePath($parent_path.$folder_path);

      if ($this->isNew())
      {
        foreach ($sizes as $size => $params)
        {
          if (isset($params['directory']))
          {
            $filesystem->mkdir($params['directory'].DIRECTORY_SEPARATOR.$parent_path.$folder_path);
          }
        }
      }
      else
      {
        if ($this->getAbsolutePath() != $previous_absolute_path)
        {
          // physically move the folders on the disk
          foreach ($sizes as $size => $params)
          {
            if (isset($params['directory']))
            {
              $filesystem->rename($params['directory'].DIRECTORY_SEPARATOR.$previous_absolute_path,
                                  $params['directory'].DIRECTORY_SEPARATOR.$parent_path.$folder_path);
            }
          }

          // update the descendants paths
          foreach ($descendants as $descendant)
          {
            $descendant_absolute_path = $descendant->getAbsolutePath();
            $descendant->setAbsolutePath($parent_path.$folder_path.substr($descendant_absolute_path, strlen($previous_absolute_path)));
            $descendant->save();
          }
        }
      }

      if (!$previous_parent)
      {
        $this->getNode()->insertAsLastChildOf($parent);
      }
      else
      {
        $this->getNode()->moveAsLastChildOf($parent);
      }
    }
  }
}