<?php

/**
 * PluginCcMedia
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
abstract class PluginCcMedia extends BaseCcMedia
{
  protected $cleverMedia = null;
  protected
    $_metadatas_unsaved,
    $_metadatas;

  public function getCleverMedia()
  {
    if (!isset($this->cleverMedia))
    {
      try
      {
        $this->cleverMedia = new cleverMedia($this->getAbsoluteFilename());
      }
      catch (Exception $e)
      {
        //throw new sfException($e->getMessage());
      }
    }

    return $this->cleverMedia;
  }

  public function __destruct()
  {
    if (isset($this->cleverMedia))
    {
      $this->cleverMedia->__destruct();
      unset($this->cleverMedia);
    }

    if (isset($this->handler))
    {
      $this->handler->__destruct();
      unset($this->handler);
    }
  }

  public function __toString()
  {
    return $this->getTitle();
  }

  public function clearMetadatas()
  {
    if ($this->isNew())
    {
      $this->_metadatas_unsaved[] = array();
      return false;
    }

    $q = Doctrine_Query::create()
      ->delete('cc_media_metadata m')
      ->where('m.cc_media_id = ?', $this->getId);
    $q->execute();
  }

  public function delete(Doctrine_Connection $conn = null)
  {
    $this->getCleverMedia()->delete();
    parent::delete($conn);
  }

  public function getAbsoluteFilename($cc_media_folder = null)
  {
    if (is_null($cc_media_folder))
    {
      $cc_media_folder = $this->getCcMediaFolder();
    }

    $path = ('' != $cc_media_folder->getAbsolutePath()) ? $cc_media_folder->getAbsolutePath().'/' : '';
    $path .= $this->getFilename();
    return $path;
  }

  public function getDisplay($options = array())
  {
    $display_options = array();

    if (isset($options['size']))
    {
      $display_options['size'] =  $options['size'];
      unset($options['size']);
    }
    else
    {
      $display_options['size'] = 'original';
    }

    if (!isset($options['alt']))
    {
      $options['alt'] = $this->getTitle();
    }

    if (!isset($options['class']))
    {
      $options['class'] = 'clever-media-preview clever-media-size-'.$display_options['size'];
    }
    else
    {
      $options['class'] .= ' clever-media-preview clever-media-size-'.$display_options['size'];
    }

    $display_options['cc_media'] = $this;
    $display_options['html_options'] = $options;
    $partial = 'cleverMediaLibrary/media_types/view'.(('' != $this->getType()) ? '_'.$this->getType() : '');
    return get_partial($partial, $display_options);
  }

  public function getMetadata($name)
  {
    if ($this->isNew())
    {
      return null;
    }

    if (!isset($this->_metadatas[$name]))
    {
      $metadata = Doctrine_Query::create()
        ->from('CcMediaMetadata m')
        ->where('m.name = ? AND cc_media_id = ?', array($name, $this->id))
        ->fetchOne();

      if ($metadata)
      {
        $this->_metadatas[$name] = $metadata;
      }
    }
    else
    {
      $metadata = $this->_metadatas[$name];
    }

    return $metadata;
  }

  public function getMetadatas()
  {
    $metadatas = Doctrine_Query::create()
      ->from('CcMediaMetadata m')
      ->where('cc_media_id = ?', array($this->id))
      ->execute();

    foreach ($metadatas as $metadata)
    {
      $this->_metadatas[$metadata->getName()] = $metadata;
    }

    return $this->_metadatas;
  }

  public function getUrl($options = array())
  {
    if (!isset($options['size']))
    {
      $options['size'] = 'original';
    }

    return sfConfig::get('app_cleverMediaLibraryPlugin_media_root', '/media')
    .'/'.cleverMediaLibraryToolkit::getDirectoryForSize($options['size'])
    .'/'.$this->getAbsoluteFilename().'?time='.strtotime($this->getUpdatedAt());
  }

  public function hasMetadata($name)
  {
    return (null !== $this->getMetadata($name));
  }

  public function save(Doctrine_Connection $conn = null)
  {
    parent::save($conn);

    if (isset($this->_metadatas_unsaved))
    {
      $this->setMetadatas($this->_metadatas_unsaved);
    }
  }

  public function setMetadata($name, $value)
  {
    if ($this->isNew())
    {
      $this->_metadatas_unsaved[$name] = $value;
      return false;
    }

    $metadata = $this->getMetadata($name);

    if (false === $metadata)
    {
      $metadata = new ccMediaMetadata();
      $metadata->setName($name);
      $metadata->setccMediaId($this->getPrimaryKey());
    }

    $metadata->setValue(''.((string)$value));
    $result = $metadata->save();
    $this->_metadatas[$name] = $metadata;
    return $result;
  }

  public function setMetadatas($metadatas)
  {
    if (is_array($metadatas))
    {
      foreach ($metadatas as $name => $value)
      {
        $this->setMetadata($name, $value);
      }
    }
  }

  public function update($array = array())
  {
    if (is_null($this->getFilename())
        && ((!isset($array['source'])
            || !isset($array['cc_media_folder'])
            || !isset($array['filename']))
            && (!isset($array['filesystem_existing'])
               || (isset($array['filesystem_existing']) && (true !== $array['filesystem_existing'])))
            )
        )
    {
      throw new sfException('Missing informations in order to update the file.');
    }

    $cc_media_folder = $array['cc_media_folder'];
    unset($array['cc_media_folder']);

    if (!is_null($cc_media_folder))
    {
      $cc_media_folder_path = ('' != $cc_media_folder->getAbsolutePath()) ? $cc_media_folder->getAbsolutePath().DIRECTORY_SEPARATOR : '';
      $this->setCcMediaFolderId($cc_media_folder->getPrimaryKey());
    }
    else
    {
      $cc_media_folder_path = $this->getccMediaFolder()->getAbsolutePath();
    }

    if (isset($array['filename']))
    {
      $filename = $array['filename'];
      $this->cleverMedia = new cleverMedia($cc_media_folder_path.$filename);

      if (isset($array['source']))
      {
        $source = $array['source'];

        if (!isset($array['filesystem_existing']) || (true !== $array['filesystem_existing']))
        {
          $this->cleverMedia->write($source);
        }
      }

      $this->setMimeType($this->cleverMedia->getMimeType());
      $type = $this->cleverMedia->getType();
      $this->setType($type);
      $thumbnail_name = $this->cleverMedia->process();
      $this->setMd5sum(md5_file($this->cleverMedia->cache()));
      $this->setFilesize(filesize($this->cleverMedia->cache()));

      // save the media metadatas
      $this->setMetadatas($this->cleverMedia->getMetadatas());

      if (false !== $thumbnail_name)
      {
        $this->setThumbnailFilename($thumbnail_name);
      }

      unset($array['source']);

      $this->setFilename($filename);
      $this->setTitle($filename);
    }

    foreach ($array as $key => $value)
    {
      $fieldNames = Doctrine::getTable('ccMedia')->getColumnNames();

      if (in_array($key, $fieldNames))
      {
        $this->$key = $value;
      }
      else
      {
        $this->setMetadata($key, $value);
      }
    }

    $this->save();
  }
}